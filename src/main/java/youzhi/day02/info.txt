给你一个字符串 s，找到 s 中最长的回文子串。


初始化后的数组：
true false false false
false true false false
false false true false
false false false true

1121
第一轮循环：
L = 2
(0,1) 11  true   maxLen = 2  begin = 0
(1,2) 12  false
(2,3) 21  false

第一轮循环之后：
true true false false
false true false false
false false true false
false false false true
begin = 0 maxLen = 2


第二轮循环之后：
L = 3
(0,2) 112  false
(1,3) 121  true  maxLen = 3 begin = 1

第二轮循环之后：
true true false false
false true false true
false false true false
false false false true
maxLen = 3 begin = 1

时间复杂度O(n^2)
空间复杂度O(n^2)

==================
算法流程：
1.定义算法所需的变量：
(1)dp[i][j]：数组[i,j]是否为回文串
(2)begin：最长回文串的起始坐标
(3)maxLen：最长回文串的长度
(4)charArray：字符串生成的字符数组
2.初始化数组dp，将dp[i][i]初始化为true，因为长度为1的字符串一定是回文串
3.根据字符串长度从低到高进行循环，先遍历长度为2的字符串，遍历长度为3的字符串......
PS:判断字符串是否为回文串的方法为：charArray[i] == charArray[j] && dp[i+1][j-1] == true(动态规划)
4.根据数组dp获取最长回文串的信息



